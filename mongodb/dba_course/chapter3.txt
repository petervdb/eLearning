Chapter 3
---------
Indexes both ascending and descending indexes can be used by the same query.
db.collection.ensureIndex({ keypattern : 1 })
Index on _id  is created automatically.
Indexes are automatically used when possible.
Indexes on arrays is also possible -> multikeys
Index on sub-documents is possible.

Different kind of indexes
-------------------------
- Default
- unique: true
- sparse : true (can be interesting if there are a small amount of documents with that field used)
- TTL 
- geospatial indexes (2 -dimentional)
db.places.ensureIndex({ loc: "2dsphere" })
db.places.getIndexes()

- text
Without index you could do:
db.sentences.find ({ words : /blabla/ })
db.sentences.ensureIndex( { words: "text" } ) /* a bit similar to multikey index */
db.sentences.find ( { $text : { $search : "blabla" } } )
db.sentences.find ( { $text : { $search : "bla bli" } } ) /* works like an or */
Options: default_language:"english"

To remove duplicates:
---------------------
db.collection.ensureIndex( { x: 1}, { unique : true, dropDups : true } )

To remove an index:
-------------------
t.dropIndex({ field : 1 })

View all indexes:
-----------------
db.system.indexes.find()

Create indexes in the background:
---------------------------------
background : true

Remarks on background: 
It is only a background operation on the primary, not on the secondary.
It is slower than executed on the forground.

Covered Indexes
---------------
When using explain, check if indexOnly is true. When indexOnly is true you have a covered index.

Explain() and hint()
--------------------
Explain executes the query, so it can be very slow.
Use hint to force that a specific Index will be uset see if that index is used: explain().cursor
hint({ $natural : 1 }) will force a full scan of the collection

Read and write impact on Indexes
--------------------------------
Writes are generally slower.
Indexes speed up reads but slow down writes.
Preferable indexes should be stored in RAM.

Padding: creates some extra space at the end of the document.

Monitoring
----------
Use mongostat and mongotop
Use currentOp() to analyse running slow queries.
Use killOp() to kill a slow query


