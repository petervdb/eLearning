Aggregation Framework in MongoDB
---------------------------------------------------------
Show number of products grouped by manufacturer:
db.products.aggregate([ {$group: { _id:"$manufacturer", num_products:{$sum: 1} } } ])
Show number of products grouped by category:
db.products.aggregate( [ {$group: { _id: "$category", "num_products": {$sum: 1} } } ])

Aggregation pipeline
$project -> reshape document = 1 to 1
$match -> filter = n to 1
$group -> aggregate = n to 1
$sort -> sort = 1 to 1
$skip -> skips = n to 1
$limit -> limits = n to 1
$unwind -> normalize = 1 to n
$out -> output = 1 to 1
------------------------------
$redact
$geonear

Compount Grouping:
db.products.aggregate([ {$group: { _id: { "maker": "$manufacturer", "category": "$category" }, num_products:{$sum: 1} } } ])

Aggregation expressions:
------------------------
$sum
$avg
$min
$max
$push (builds an array)
$addtoSet (builds an array)
$first (sort)
$last (sort)


db.products.aggregate([ {$group: { _id: { "maker": "$manufacturer" }, num_products:{$sum: "$price" } } } ])
db.zips.aggregate( [ { "$group": { "_id": "$state" , population: {$sum: "$pop" } } } ] )
db.zips.aggregate( [ { "$group": { "_id": "$state" , avg_pop: {$avg: "$pop" } } } ] )

db.products.aggregate([ {$group: { _id: { "maker": "$manufacturer" }, categories:{$addToSet: "$category" } } } ])

Show all postal codes for a specific city:
db.zips.aggregate( [ { "$group" : { "_id": "$city", "postal_codes" : {$addToSet: "$_id" } } } ] )

Will show duplicates in categories:
db.products.aggregate([ {$group: { _id: { "maker": "$manufacturer" }, categories:{$push: "$category" } } } ])


db.products.aggregate([ {$group: { _id: { "maker": "$manufacturer" }, maxprice:{$max: "$price" } } } ])
db.products.aggregate([ {$group: { _id: { "maker": "$manufacturer" }, minprice:{$min: "$price" } } } ])
db.zips.aggregate( [ { "$group": { "_id": "$state" , max_population: {$max: "$pop" } } } ] )

Using Double Grouping:
-------------------------
db.grades.aggregate([
	{'$group': {_id:{call_id:"$class_id", student_id:"$student_id"}, 'average':{"$avg": "$score" }}},
	{'$group': {_id:"$_id.class_id", 'average':{"$avg": "$average" }}}])

Using $project
----------------------------------	
db.products.aggregate([
  {$project:
    {
      _id: 0,
      'maker': {$toLower: "$manufacturer"},
      'details': {'category': "$category",
            'price': {$multiply":["$price",10]}
      },
      'item': '$name'
    }
    }
  ])

db.zips.aggregate([
  {$project:
    {
      _id: 0,
      'city': {$toLower: "$city"},
      'pop': 1,
      'state': 1,
      'zip': '$_id'
    }
  }
])

Using $match
------------------------------
db.zips.aggregate([ { $match: { state:"CA"}} ])

db.zips.aggregate([ { $match: { state:"CA"}},{$group: { _id: "$city",
	population: {$sum: "$pop"},
	zip_codes: {$addToSet: "$_id"}
  } } ])

db.zips.aggregate([ { $match: { state:"CA"}},{$group: { _id: "$city",
	population: {$sum: "$pop"},
	zip_codes: {$addToSet: "$_id"}
	} },
	{ $project:
    { _id : 0,
      city: "$_id",
      population: 1,
      zip_codes: 1
    }
  }
 ])

db.zips.aggregate([ { $match: { pop: { $gt: 100000} } } ])

Using $text
--------------------------
db.sentences.aggregate([
  {$match: { $text: { $search: "tree rat"}}
  },
  { $sort: { score: {$meta: "textScore" }}
  },
  { $project: { words: 1, _id: 0 }
  }
])

Using $sort
--------------------------
